@page "/user/registration"
@* @rendermode InteractiveServer *@

@inject IClient httpClient
@inject NavigationManager navManager


<h3>Register new account</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">
        <p>@ErrorMessage</p>
    </div>
}

<div class="card-body">
    <EditForm FormName="user-registration-form" Model=@UserRegistrationModel OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText @bind-Value="UserRegistrationModel.Role" hidden/>

        <div class="form-group">
            <label for="email">Email Address</label>
            <InputText class="form-control" @bind-Value="UserRegistrationModel.Email" />
            <ValidationMessage For="@(() => UserRegistrationModel.Email)" />
        </div>
        <br />
        <div class="form-group">
            <label for="email">First Name</label>
            <InputText class="form-control" @bind-Value="UserRegistrationModel.FirstName" />
            <ValidationMessage For="@(() => UserRegistrationModel.FirstName)" />
        </div>
        <br />
        <div class="form-group">
            <label for="email">Last Name</label>
            <InputText class="form-control" @bind-Value="UserRegistrationModel.LastName" />
            <ValidationMessage For="@(() => UserRegistrationModel.LastName)" />
        </div>
        <br />
        <div class="form-group">
            <label for="email">Password</label>
            <InputText class="form-control" type="password" @bind-Value="UserRegistrationModel.Password" />
            <ValidationMessage For="@(() => UserRegistrationModel.Password)" />
        </div>
        <br />
        <button type="submit" class="btn btn-primary btn-block">Register</button>

    </EditForm>
</div>

@code {

    [SupplyParameterFromForm]
    private UserDto UserRegistrationModel { get; set; } = new UserDto
    {
        Role = "User"
    };

    private string? ErrorMessage;

    private async Task HandleRegistration()
    {
        try
        {
            await httpClient.RegisterAsync(UserRegistrationModel);
            NavigateToLogin();
        }
        catch (ApiException ex)
        {
            if (ex.StatusCode >= 200 && ex.StatusCode <= 299)
            {
                NavigateToLogin();
            }
            ErrorMessage = !string.IsNullOrEmpty(ex.Response) ? ex.Response : ex.Message;
            // StateHasChanged();
        }
    }

    private void NavigateToLogin()
    {
        navManager.NavigateTo("/users/login");
    }

}
